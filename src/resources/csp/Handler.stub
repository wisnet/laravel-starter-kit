<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Throwable;
use App\Policies\CSPPolicy;
use Spatie\Csp\Directive;
use Spatie\Csp\Keyword;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    /**
     * Render an exception into a response.
     *
     * @param  Request  $request
     * @param  \Exception  $e
     * @return Response|\Symfony\Component\HttpFoundation\Response
     */
    public function render($request, Exception $e)
    {
        $this->container->singleton(CSPPolicy::class, function ($app) {
            return new CSPPolicy::class();
        });
        app(CSPPolicy::class)->addDirective(Directive::SCRIPT, Keyword::UNSAFE_INLINE);
        app(CSPPolicy::class)->addDirective(Directive::STYLE, Keyword::UNSAFE_INLINE);

        return parent::render($request, $e);
    }

    /**
     * Uncomment this if you're using Sentry. Once you have your DSN run the following command:
     * php artisan sentry:publish --dsn=your_DSN
     */
    // public function report(Throwable $exception)
    // {
    //     if ($this->shouldReport($exception) && app()->bound('sentry')) {
    //         app('sentry')->captureException($exception);
    //     }
    //
    //     parent::report($exception);
    // }
}
